// <auto-generated />
using System;
using LanguageCourses.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LanguageCourses.Persistence.Migrations
{
    [DbContext(typeof(LanguageCoursesContext))]
    [Migration("20241113014620_InitialData")]
    partial class InitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseID");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.HasKey("CourseId", "StudentId")
                        .HasName("PK__CourseSt__4A0123205C2964B0");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseStudents", (string)null);
                });

            modelBuilder.Entity("LanguageCourses.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EmployeeID");

                    b.Property<int>("GroupSize")
                        .HasColumnType("int");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<string>("Intensity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TrainingProgram")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("TuitionFee")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("CourseId")
                        .HasName("PK__Courses__C92D71876B88FF34");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("11111111-1111-1111-1111-111111111111"),
                            AvailableSeats = 10,
                            Description = "Курс для начинающих программистов",
                            EmployeeId = new Guid("22222222-2222-2222-2222-222222222222"),
                            GroupSize = 15,
                            Hours = 40,
                            Intensity = "Средняя",
                            Name = "Основы программирования",
                            TrainingProgram = "Изучение основ языков программирования",
                            TuitionFee = 15000m
                        },
                        new
                        {
                            CourseId = new Guid("33333333-3333-3333-3333-333333333333"),
                            AvailableSeats = 8,
                            Description = "Курс для веб-разработчиков",
                            EmployeeId = new Guid("44444444-4444-4444-4444-444444444444"),
                            GroupSize = 12,
                            Hours = 60,
                            Intensity = "Высокая",
                            Name = "Разработка веб-приложений",
                            TrainingProgram = "Создание интерактивных веб-приложений с использованием JavaScript и других технологий",
                            TuitionFee = 20000m
                        });
                });

            modelBuilder.Entity("LanguageCourses.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EmployeeID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("JobTitleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobTitleID");

                    b.Property<string>("Midname")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("EmployeeId")
                        .HasName("PK__Employee__7AD04FF14A0267E9");

                    b.HasIndex("JobTitleId");

                    b.HasIndex(new[] { "PassportNumber" }, "UQ__Employee__45809E71543558D3")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "UQ__Employee__5C7E359EB6DB6BF9")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Address = "Москва, ул. 1",
                            BirthDate = new DateOnly(1990, 1, 1),
                            Education = "Высшее",
                            JobTitleId = new Guid("66666666-6666-6666-6666-666666666666"),
                            Midname = "Иванович",
                            Name = "Иван",
                            PassportNumber = "HB6543129",
                            Phone = "+79012345678",
                            Surname = "Иванов"
                        },
                        new
                        {
                            EmployeeId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Address = "Санкт-Петербург, ул. 2",
                            BirthDate = new DateOnly(1985, 2, 2),
                            Education = "Высшее",
                            JobTitleId = new Guid("88888888-8888-8888-8888-888888888888"),
                            Midname = "Петрович",
                            Name = "Петр",
                            PassportNumber = "HB6543111",
                            Phone = "+79087654321",
                            Surname = "Петров"
                        });
                });

            modelBuilder.Entity("LanguageCourses.Domain.Entities.JobTitle", b =>
                {
                    b.Property<Guid>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobTitleID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Requirements")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Responsibilities")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("JobTitleId")
                        .HasName("PK__JobTitle__35382FC9A56AE929");

                    b.ToTable("JobTitles");

                    b.HasData(
                        new
                        {
                            JobTitleId = new Guid("66666666-6666-6666-6666-666666666666"),
                            Name = "Преподаватель",
                            Requirements = "Высшее образование.",
                            Responsibilities = "Преподавание курсов.",
                            Salary = 60000m
                        },
                        new
                        {
                            JobTitleId = new Guid("88888888-8888-8888-8888-888888888888"),
                            Name = "Администратор",
                            Requirements = "Опыт работы в образовании.",
                            Responsibilities = "Организация учебного процесса.",
                            Salary = 40000m
                        });
                });

            modelBuilder.Entity("LanguageCourses.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PaymentID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__9B556A5874FA56DF");

                    b.HasIndex("StudentId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = new Guid("99999999-9999-9999-9999-999999999992"),
                            Amount = 15000m,
                            Date = new DateOnly(2024, 11, 13),
                            Purpose = "Оплата курса Основы программирования",
                            StudentId = new Guid("99999999-9999-9999-9999-999999999993")
                        },
                        new
                        {
                            PaymentId = new Guid("99999999-9999-9999-9999-999999999994"),
                            Amount = 20000m,
                            Date = new DateOnly(2024, 10, 13),
                            Purpose = "Оплата курса Разработка веб-приложений",
                            StudentId = new Guid("99999999-9999-9999-9999-999999999995")
                        });
                });

            modelBuilder.Entity("LanguageCourses.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("MidName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("StudentId")
                        .HasName("PK__Students__32C52A7968AC35E8");

                    b.HasIndex(new[] { "PassportNumber" }, "UQ__Students__45809E717E8906CA")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "UQ__Students__5C7E359EED8438DE")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = new Guid("99999999-9999-9999-9999-999999999993"),
                            Address = "Москва, ул. 3",
                            BirthDate = new DateOnly(2000, 5, 15),
                            MidName = "Иванович",
                            Name = "Алексей",
                            PassportNumber = "HB6543122",
                            Phone = "+79011112233",
                            Surname = "Смирнов"
                        },
                        new
                        {
                            StudentId = new Guid("99999999-9999-9999-9999-999999999995"),
                            Address = "Санкт-Петербург, ул. 4",
                            BirthDate = new DateOnly(1999, 7, 20),
                            Name = "Сергей",
                            PassportNumber = "HB6543121",
                            Phone = "+79044445556",
                            Surname = "Попов"
                        });
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("LanguageCourses.Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CourseStu__Cours__4A8DFDBE");

                    b.HasOne("LanguageCourses.Domain.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CourseStu__Stude__4B8221F7");
                });

            modelBuilder.Entity("LanguageCourses.Domain.Entities.Course", b =>
                {
                    b.HasOne("LanguageCourses.Domain.Entities.Employee", "Employee")
                        .WithMany("Courses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Courses__Employe__3F1C4B12");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("LanguageCourses.Domain.Entities.Employee", b =>
                {
                    b.HasOne("LanguageCourses.Domain.Entities.JobTitle", "JobTitle")
                        .WithMany("Employees")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Employees__JobTi__3B4BBA2E");

                    b.Navigation("JobTitle");
                });

            modelBuilder.Entity("LanguageCourses.Domain.Entities.Payment", b =>
                {
                    b.HasOne("LanguageCourses.Domain.Entities.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Payments__Studen__4F52B2DB");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LanguageCourses.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("LanguageCourses.Domain.Entities.JobTitle", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("LanguageCourses.Domain.Entities.Student", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
